1     	 0000					.public _characteristics
2     	 0000					.public _inputGain
3     	 0000					.public _mode
4     	 0000					.public _modeGain
5     	 0000					.public _output_mode
6     	 0000					.public _ratio
7     	 0000					.public _sampleBuffer
8     	 0000					.public _threshold
9     	 0000					.extern _cl_wavread_bits_per_sample
10    	 0000					.extern _cl_wavread_close
11    	 0000					.extern _cl_wavread_frame_rate
12    	 0000					.extern _cl_wavread_getnchannels
13    	 0000					.extern _cl_wavread_number_of_frames
14    	 0000					.extern _cl_wavread_open
15    	 0000					.extern _cl_wavread_recvsample
16    	 0000					.extern _cl_wavwrite_close
17    	 0000					.extern _cl_wavwrite_open
18    	 0000					.extern _cl_wavwrite_sendsample
19    	 0000					.public _main
20    	 0000					.extern _memset
21    	 0000					.extern _printf
22    	 0000					.public _processing
23    	 0000					.extern _strcpy
24    	 0000					.extern __div
25    	 0000					.extern __mul_sat_laccum
26    							.xdata_ovly
26     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
27    	 0000				__extractedConst_0_1
28    	 0000					.dw  (0x7fffffff)
	 0000	 7FFFFFFF	 
29    							.xdata_ovly
29     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
30    	 0000				_characteristics
31    	 0000					.dw  (0x0)
	 0000	 00000000	 
32    							.xdata_ovly
32     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
33    	 0000				_inputGain
34    	 0000					.dw  (0x40000000)
	 0000	 40000000	 
35    							.xdata_ovly
35     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
36    	 0000				_mode
37    	 0000					.dw  (0x0)
	 0000	 00000000	 
38    							.xdata_ovly
38     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
39    	 0000				_modeGain
40    	 0000					.dw  (0x0)
	 0000	 00000000	 
41    	 0001					.dw  (0x147ae147)
	 0001	 147AE147	 
42    	 0002					.dw  (0xae147ae1)
	 0002	 AE147AE1	 
43    	 0003					.dw  (0x0)
	 0003	 00000000	 
44    	 0004					.dw  (0x40000000)
	 0004	 40000000	 
45    	 0005					.dw  (0x0)
	 0005	 00000000	 
46    	 0006					.dw  (0x0)
	 0006	 00000000	 
47    	 0007					.dw  (0xe3d70a3d)
	 0007	 E3D70A3D	 
48    	 0008					.dw  (0x70a3d70a)
	 0008	 70A3D70A	 
49    	 0009					.dw  (0x0)
	 0009	 00000000	 
50    	 000A					.dw  (0xb47ae147)
	 000A	 B47AE147	 
51    	 000B					.dw  (0xae147ae1)
	 000B	 AE147AE1	 
52    							.xdata_ovly
52     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
53    	 0000				_output_mode
54    	 0000					.dw  (0x2)
	 0000	 00000002	 
55    	 0001					.dw  (0x0)
	 0001	 00000000	 
56    	 0002					.dw  (0x1)
	 0002	 00000001	 
57    							.xdata_ovly
57     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
58    	 0000				_ratio
59    	 0000					.dw  (0x6666666)
	 0000	 06666666	 
60    							.xdata_ovly
60     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
61    	 0000				_sampleBuffer
62    	 0000					.bss (0x80)
63    							.xdata_ovly
63     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
64    	 0000				_string_const_0
65    	 0000					.dw  (0x45)
	 0000	 00000045	 
66    	 0001					.dw  (0x72)
	 0001	 00000072	 
67    	 0002					.dw  (0x72)
	 0002	 00000072	 
68    	 0003					.dw  (0x6f)
	 0003	 0000006F	 
69    	 0004					.dw  (0x72)
	 0004	 00000072	 
70    	 0005					.dw  (0x3a)
	 0005	 0000003A	 
71    	 0006					.dw  (0x20)
	 0006	 00000020	 
72    	 0007					.dw  (0x43)
	 0007	 00000043	 
73    	 0008					.dw  (0x6f)
	 0008	 0000006F	 
74    	 0009					.dw  (0x75)
	 0009	 00000075	 
75    	 000A					.dw  (0x6c)
	 000A	 0000006C	 
76    	 000B					.dw  (0x64)
	 000B	 00000064	 
77    	 000C					.dw  (0x20)
	 000C	 00000020	 
78    	 000D					.dw  (0x6e)
	 000D	 0000006E	 
79    	 000E					.dw  (0x6f)
	 000E	 0000006F	 
80    	 000F					.dw  (0x74)
	 000F	 00000074	 
81    	 0010					.dw  (0x20)
	 0010	 00000020	 
82    	 0011					.dw  (0x6f)
	 0011	 0000006F	 
83    	 0012					.dw  (0x70)
	 0012	 00000070	 
84    	 0013					.dw  (0x65)
	 0013	 00000065	 
85    	 0014					.dw  (0x6e)
	 0014	 0000006E	 
86    	 0015					.dw  (0x20)
	 0015	 00000020	 
87    	 0016					.dw  (0x77)
	 0016	 00000077	 
88    	 0017					.dw  (0x61)
	 0017	 00000061	 
89    	 0018					.dw  (0x76)
	 0018	 00000076	 
90    	 0019					.dw  (0x65)
	 0019	 00000065	 
91    	 001A					.dw  (0x66)
	 001A	 00000066	 
92    	 001B					.dw  (0x69)
	 001B	 00000069	 
93    	 001C					.dw  (0x6c)
	 001C	 0000006C	 
94    	 001D					.dw  (0x65)
	 001D	 00000065	 
95    	 001E					.dw  (0x2e)
	 001E	 0000002E	 
96    	 001F					.dw  (0xa)
	 001F	 0000000A	 
97    	 0020					.dw  (0x0)
	 0020	 00000000	 
98    							.xdata_ovly
98     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
99    	 0000				_string_const_1
100   	 0000					.dw  (0x45)
	 0000	 00000045	 
101   	 0001					.dw  (0x72)
	 0001	 00000072	 
102   	 0002					.dw  (0x72)
	 0002	 00000072	 
103   	 0003					.dw  (0x6f)
	 0003	 0000006F	 
104   	 0004					.dw  (0x72)
	 0004	 00000072	 
105   	 0005					.dw  (0x3a)
	 0005	 0000003A	 
106   	 0006					.dw  (0x20)
	 0006	 00000020	 
107   	 0007					.dw  (0x43)
	 0007	 00000043	 
108   	 0008					.dw  (0x6f)
	 0008	 0000006F	 
109   	 0009					.dw  (0x75)
	 0009	 00000075	 
110   	 000A					.dw  (0x6c)
	 000A	 0000006C	 
111   	 000B					.dw  (0x64)
	 000B	 00000064	 
112   	 000C					.dw  (0x20)
	 000C	 00000020	 
113   	 000D					.dw  (0x6e)
	 000D	 0000006E	 
114   	 000E					.dw  (0x6f)
	 000E	 0000006F	 
115   	 000F					.dw  (0x74)
	 000F	 00000074	 
116   	 0010					.dw  (0x20)
	 0010	 00000020	 
117   	 0011					.dw  (0x6f)
	 0011	 0000006F	 
118   	 0012					.dw  (0x70)
	 0012	 00000070	 
119   	 0013					.dw  (0x65)
	 0013	 00000065	 
120   	 0014					.dw  (0x6e)
	 0014	 0000006E	 
121   	 0015					.dw  (0x20)
	 0015	 00000020	 
122   	 0016					.dw  (0x77)
	 0016	 00000077	 
123   	 0017					.dw  (0x61)
	 0017	 00000061	 
124   	 0018					.dw  (0x76)
	 0018	 00000076	 
125   	 0019					.dw  (0x65)
	 0019	 00000065	 
126   	 001A					.dw  (0x66)
	 001A	 00000066	 
127   	 001B					.dw  (0x69)
	 001B	 00000069	 
128   	 001C					.dw  (0x6c)
	 001C	 0000006C	 
129   	 001D					.dw  (0x65)
	 001D	 00000065	 
130   	 001E					.dw  (0x2e)
	 001E	 0000002E	 
131   	 001F					.dw  (0xa)
	 001F	 0000000A	 
132   	 0020					.dw  (0x0)
	 0020	 00000000	 
133   							.xdata_ovly
133    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
134   	 0000				_threshold
135   	 0000					.dw  (0x26666666)
	 0000	 26666666	 
136   							.code_ovly
136    >> start of macro: .code_ovly
1+    									seg_single , "CODE_OVLY", CODE
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_CODE_ )
2+    						    segment
3+    						  .else
4+    						    segment "CODE_OVLY"
5+    							.if "" != ""
6+    						___SegStart_CODE_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .code_ovly
137   						
138   						
139   						
140   	 0000				_gst_audio_dynamic_transform_compressor_float:			/* LN: 34 | CYCLE: 0 | RULES: () */ 
141   	 0000	 BB540007		xmem[i7] = i7			# LN: 34 | 
142   	 0001	 020F7FFF		i7 += 1			# LN: 34 | 
143   	 0002	 87750003		i7 = i7 + (0x3)			# LN: 34 | 
144   	 0003				cline_34_0:			/* LN: 40 | CYCLE: 0 | RULES: () */ 
145   	 0003	 90750001		i0 = i7 - (0x1)			# LN: 40 | 
146   	 0004	 884A0050		uhalfword(a0) = (_sampleBuffer + 80)			# LN: 40 | 
147   	 0005	 88540000		xmem[i0] = a0			# LN: 40 | 
148   	 0006				cline_40_0:			/* LN: 43 | CYCLE: 0 | RULES: () */ 
149   	 0006	 88040000		a0 = xmem[_ratio + 0]			# LN: 43 | 
150   	 0007	 89040000		a1 = xmem[__extractedConst_0_1 + 0]			# LN: 43 | 
151   	 0008	 00004F08		a0 - a1			# LN: 43 | 
152   	 0009	 8448000B		if (a != 0) jmp (else_0)			# LN: 43 | 
153   	 000A				cline_43_0:			/* LN: 44 | CYCLE: 0 | RULES: () */ 
154   	 000A	 8008004B		jmp (__epilogue_220)			# LN: 44 | 
155   	 000B				cline_44_0:			/* LN: 46 | CYCLE: 0 | RULES: () */ 
156   	 000B				endif_0:			/* LN: 43 | CYCLE: 0 | RULES: () */ 
157   	 000B				else_0:			/* LN: 43 | CYCLE: 0 | RULES: () */ 
158   	 000B	 88040000		a0 = xmem[_characteristics + 0]			# LN: 46 | 
159   	 000C	 00004E80		a0 & a0			# LN: 46 | 
160   	 000D	 8448004A		if (a != 0) jmp (else_1)			# LN: 46 | 
161   	 000E				cline_46_0:			/* LN: 48 | CYCLE: 0 | RULES: () */ 
162   	 000E	 90750002		i0 = i7 - (0x2)			# LN: 48 | 
163   	 000F	 00004DC0		a0 = 0			# LN: 48 | 
164   	 0010	 98540000		xmem[i0] = a0h			# LN: 48 | 
165   	 0011	 81000048		do (0x10), label_end_92			# LN: 48 | 
166   	 0012				cline_48_0:			/* LN: 50 | CYCLE: 0 | RULES: () */ 
167   	 0012				label_begin_92:			/* LN: 48 | CYCLE: 0 | RULES: () */ 
168   	 0012	 90750001		i0 = i7 - (0x1)			# LN: 50 | 
169   	 0013	 B0140000		i0 = xmem[i0]			# LN: 50 | 
170   	 0014	 91750003		i1 = i7 - (0x3)			# LN: 50 | 
171   	 0015	 88140000		a0 = xmem[i0]			# LN: 50 | 
172   	 0016	 98540001		xmem[i1] = a0h			# LN: 50 | 
173   	 0017				cline_50_0:			/* LN: 52 | CYCLE: 0 | RULES: () */ 
174   	 0017	 90750003		i0 = i7 - (0x3)			# LN: 52 | 
175   	 0018	 88140000		a0 = xmem[i0]			# LN: 52 | 
176   	 0019	 89040000		a1 = xmem[_threshold + 0]			# LN: 52 | 
177   	 001A	 00004F08		a0 - a1			# LN: 52 | 
178   	 001B	 85080027		if (a <= 0) jmp (else_2)			# LN: 52 | 
179   	 001C				cline_52_0:			/* LN: 53 | CYCLE: 0 | RULES: () */ 
180   	 001C	 90750003		i0 = i7 - (0x3)			# LN: 53 | 
181   	 001D	 88140000		a0 = xmem[i0]			# LN: 53 | 
182   	 001E	 89040000		a1 = xmem[_threshold + 0]			# LN: 53 | 
183   	 001F	 00004448		a0 = a0 - a1			# LN: 53 | 
184   	 0020	 80040000		x0 = xmem[_ratio + 0]			# LN: 53 | 
185   	 0021	 89040000		a1 = xmem[_threshold + 0]			# LN: 53 | 
186   	 0022	 01584C08		x1 = a0h; a0 =+ a1			# LN: 53, 53 | 
187   	 0023	 00002028		a0 += x1 * x0			# LN: 53 | 
188   	 0024	 90750003		i0 = i7 - (0x3)			# LN: 53 | 
189   	 0025	 88540000		xmem[i0] = a0			# LN: 53 | 
190   	 0026	 80080039		jmp (endif_2)			# LN: 53 | 
191   	 0027				cline_53_0:			/* LN: 55 | CYCLE: 0 | RULES: () */ 
192   	 0027				else_2:			/* LN: 52 | CYCLE: 0 | RULES: () */ 
193   	 0027	 88040000		a0 = xmem[_threshold + 0]			# LN: 55 | 
194   	 0028	 00004C80		a0 =- a0			# LN: 55 | 
195   	 0029	 90750003		i0 = i7 - (0x3)			# LN: 55 | 
196   	 002A	 89140000		a1 = xmem[i0]			# LN: 55 | 
197   	 002B	 00004F01		a1 - a0			# LN: 55 | 
198   	 002C	 84C80039		if (a >= 0) jmp (else_3)			# LN: 55 | 
199   	 002D				cline_55_0:			/* LN: 56 | CYCLE: 0 | RULES: () */ 
200   	 002D	 90750003		i0 = i7 - (0x3)			# LN: 56 | 
201   	 002E	 88140000		a0 = xmem[i0]			# LN: 56 | 
202   	 002F	 89040000		a1 = xmem[_threshold + 0]			# LN: 56 | 
203   	 0030	 00004408		a0 = a0 + a1			# LN: 56 | 
204   	 0031	 00587FFF		x0 = a0h			# LN: 56 | 
205   	 0032	 81040000		x1 = xmem[_ratio + 0]			# LN: 56 | 
206   	 0033	 00002080		a0 = x0 * x1			# LN: 56 | 
207   	 0034	 89040000		a1 = xmem[_threshold + 0]			# LN: 56 | 
208   	 0035	 00004448		a0 = a0 - a1			# LN: 56 | 
209   	 0036	 90750003		i0 = i7 - (0x3)			# LN: 56 | 
210   	 0037	 88540000		xmem[i0] = a0			# LN: 56 | 
211   	 0038	 80080039		jmp (endif_3)			# LN: 56 | 
212   	 0039				cline_56_0:			/* LN: 58 | CYCLE: 0 | RULES: () */ 
213   	 0039				endif_2:			/* LN: 52 | CYCLE: 0 | RULES: () */ 
214   	 0039				endif_3:			/* LN: 55 | CYCLE: 0 | RULES: () */ 
215   	 0039				else_3:			/* LN: 55 | CYCLE: 0 | RULES: () */ 
216   	 0039	 90750003		i0 = i7 - (0x3)			# LN: 58 | 
217   	 003A	 91750001		i1 = i7 - (0x1)			# LN: 58 | 
218   	 003B	 B1140001		i1 = xmem[i1]			# LN: 58 | 
219   	 003C	 88140000		a0 = xmem[i0]			# LN: 58 | 
220   	 003D	 98540001		xmem[i1] = a0h			# LN: 58 | 
221   	 003E				cline_58_0:			/* LN: 59 | CYCLE: 0 | RULES: () */ 
222   	 003E	 90750001		i0 = i7 - (0x1)			# LN: 59 | 
223   	 003F	 B0140000		i0 = xmem[i0]			# LN: 59 | 
224   	 0040	 91750001		i1 = i7 - (0x1)			# LN: 59 | 
225   	 0041	 02087FFF		i0 += 1			# LN: 59 | 
226   	 0042	 B0540001		xmem[i1] = i0			# LN: 59 | 
227   	 0043				cline_59_0:			/* LN: 48 | CYCLE: 0 | RULES: () */ 
228   	 0043				init_latch_label_0:			/* LN: 60 | CYCLE: 0 | RULES: () */ 
229   	 0043	 90750002		i0 = i7 - (0x2)			# LN: 48 | 
230   	 0044	 88140000		a0 = xmem[i0]			# LN: 48 | 
231   	 0045	 894A0001		uhalfword(a1) = (0x1)			# LN: 48 | 
232   	 0046	 00004408		a0 = a0 + a1			# LN: 48 | 
233   	 0047	 90750002		i0 = i7 - (0x2)			# LN: 48 | 
234   	 0048				label_end_92:			# LN: 48 | CYCLE: 5 | RULES: ()
235   	 0048	 98540000		xmem[i0] = a0h			# LN: 48 | 
236   	 0049				for_end_0:			/* LN: 48 | CYCLE: 0 | RULES: () */ 
237   	 0049	 8008004A		jmp (endif_1)			# LN: 48 | 
238   	 004A				cline_48_1:			/* LN: 62 | CYCLE: 0 | RULES: () */ 
239   	 004A				endif_1:			/* LN: 46 | CYCLE: 0 | RULES: () */ 
240   	 004A				else_1:			/* LN: 46 | CYCLE: 0 | RULES: () */ 
241   	 004A	 8008004B		jmp (__epilogue_220)			# LN: 62 | 
242   	 004B				__epilogue_220:			/* LN: 62 | CYCLE: 0 | RULES: () */ 
243   	 004B	 97750003		i7 = i7 - (0x3)			# LN: 62 | 
244   	 004C	 02177FFF		i7 -= 1			# LN: 62 | 
245   	 004D	 81880000		ret			# LN: 62 | 
246   						
247   						
248   						
249   							# This construction should ensure linking of crt0 in case when target is a standalone program without the OS
250   							.if defined(_OVLY_)
251   								.if .strcmp('standalone',_OVLY_)=0
252   								.if .strcmp('crystal32',_TARGET_FAMILY_)=0
253   	 0000							.extern __start         # dummy use of __start to force linkage of crt0
254   	 0000				dummy		.equ(__start)
255   								.else
256   									.extern __intvec         # dummy use of __intvec to force linkage of intvec
257   						dummy		.equ(__intvec)
258   								.endif
259   								.endif
260   							.endif
261   						
262   	 004E				_main:			/* LN: 152 | CYCLE: 0 | RULES: () */ 
263   	 004E	 BB540007		xmem[i7] = i7			# LN: 152 | 
264   	 004F	 020F7FFF		i7 += 1			# LN: 152 | 
265   	 0050	 8775020E		i7 = i7 + (0x20e)			# LN: 152 | 
266   	 0051	 91750001		i1 = i7 - (0x1)			# LN: 152 | 
267   	 0052	 98540001		xmem[i1] = a0h			# LN: 152 | 
268   	 0053	 91750002		i1 = i7 - (0x2)			# LN: 152 | 
269   	 0054	 B0540001		xmem[i1] = i0			# LN: 152 | 
270   	 0055				cline_152_0:			/* LN: 165 | CYCLE: 0 | RULES: () */ 
271   	 0055	 90750003		i0 = i7 - (0x3)			# LN: 165 | 
272   	 0056	 884A0008		uhalfword(a0) = (0x8)			# LN: 165 | 
273   	 0057	 98540000		xmem[i0] = a0h			# LN: 165 | 
274   	 0058				cline_165_0:			/* LN: 168 | CYCLE: 0 | RULES: () */ 
275   	 0058	 90750004		i0 = i7 - (0x4)			# LN: 168 | 
276   	 0059	 00004DC0		a0 = 0			# LN: 168 | 
277   	 005A	 98540000		xmem[i0] = a0h			# LN: 168 | 
278   	 005B	 80800068		do (0x8), label_end_97			# LN: 168 | 
279   	 005C				cline_168_0:			/* LN: 169 | CYCLE: 0 | RULES: () */ 
280   	 005C				label_begin_97:			/* LN: 168 | CYCLE: 0 | RULES: () */ 
281   	 005C	 90750004		i0 = i7 - (0x4)			# LN: 169 | 
282   	 005D	 19404DC0		a1 = xmem[i0]; a0 = 0			# LN: 169, 169 | 
283   	 005E	 00004EC1		a1 = a1 << 4			# LN: 169 | 
284   	 005F	 49707FFF		i0 = a1			# LN: 169 | 
285   	 0060	 894A0010		uhalfword(a1) = (0x10)			# LN: 169 | 
286   	 0061	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 169 | 
287   	 0062	 80880000		call (_memset)			# LN: 169 | 
288   	 0063				cline_169_0:			/* LN: 168 | CYCLE: 0 | RULES: () */ 
289   	 0063				init_latch_label_5:			/* LN: 169 | CYCLE: 0 | RULES: () */ 
290   	 0063	 90750004		i0 = i7 - (0x4)			# LN: 168 | 
291   	 0064	 88140000		a0 = xmem[i0]			# LN: 168 | 
292   	 0065	 894A0001		uhalfword(a1) = (0x1)			# LN: 168 | 
293   	 0066	 00004408		a0 = a0 + a1			# LN: 168 | 
294   	 0067	 90750004		i0 = i7 - (0x4)			# LN: 168 | 
295   	 0068				label_end_97:			# LN: 168 | CYCLE: 5 | RULES: ()
296   	 0068	 98540000		xmem[i0] = a0h			# LN: 168 | 
297   	 0069				cline_168_1:			/* LN: 173 | CYCLE: 0 | RULES: () */ 
298   	 0069				for_end_5:			/* LN: 168 | CYCLE: 0 | RULES: () */ 
299   	 0069	 90750002		i0 = i7 - (0x2)			# LN: 173 | 
300   	 006A	 B0140000		i0 = xmem[i0]			# LN: 173 | 
301   	 006B	 91750104		i1 = i7 - (260 - 0)			# LN: 173 | 
302   	 006C	 B8140000		i4 = xmem[i0]			# LN: 173 | 
303   	 006D	 B1090030		i0 = i1			# LN: 173 | 
304   	 006E	 B8090031		i1 = i4			# LN: 173 | 
305   	 006F	 80880000		call (_strcpy)			# LN: 173 | 
306   	 0070				cline_173_0:			/* LN: 174 | CYCLE: 0 | RULES: () */ 
307   	 0070	 90750104		i0 = i7 - (260 - 0)			# LN: 174 | 
308   	 0071	 80880000		call (_cl_wavread_open)			# LN: 174 | 
309   	 0072	 98090030		AnyReg(i0, a0h)			# LN: 174 | 
310   	 0073	 91750105		i1 = i7 - (0x105)			# LN: 174 | 
311   	 0074	 B0540001		xmem[i1] = i0			# LN: 174 | 
312   	 0075				cline_174_0:			/* LN: 175 | CYCLE: 0 | RULES: () */ 
313   	 0075	 90750105		i0 = i7 - (0x105)			# LN: 175 | 
314   	 0076	 88140000		a0 = xmem[i0]			# LN: 175 | 
315   	 0077	 00004E80		a0 & a0			# LN: 175 | 
316   	 0078	 8448007D		if (a != 0) jmp (else_5)			# LN: 175 | 
317   	 0079				cline_175_0:			/* LN: 177 | CYCLE: 0 | RULES: () */ 
318   	 0079	 A0050000		i0 = (0) + (_string_const_0)			# LN: 177 | 
319   	 007A	 80880000		call (_printf)			# LN: 177 | 
320   	 007B				cline_177_0:			/* LN: 178 | CYCLE: 0 | RULES: () */ 
321   	 007B	 886AFFFF		halfword(a0) = (0xffff)			# LN: 178 | 
322   	 007C	 8008011F		jmp (__epilogue_224)			# LN: 178 | 
323   	 007D				cline_178_0:			/* LN: 184 | CYCLE: 0 | RULES: () */ 
324   	 007D				endif_5:			/* LN: 175 | CYCLE: 0 | RULES: () */ 
325   	 007D				else_5:			/* LN: 175 | CYCLE: 0 | RULES: () */ 
326   	 007D	 90750105		i0 = i7 - (0x105)			# LN: 184 | 
327   	 007E	 B0140000		i0 = xmem[i0]			# LN: 184 | 
328   	 007F	 80880000		call (_cl_wavread_getnchannels)			# LN: 184 | 
329   	 0080	 90750106		i0 = i7 - (0x106)			# LN: 184 | 
330   	 0081	 98540000		xmem[i0] = a0h			# LN: 184 | 
331   	 0082				cline_184_0:			/* LN: 185 | CYCLE: 0 | RULES: () */ 
332   	 0082	 90750105		i0 = i7 - (0x105)			# LN: 185 | 
333   	 0083	 B0140000		i0 = xmem[i0]			# LN: 185 | 
334   	 0084	 80880000		call (_cl_wavread_bits_per_sample)			# LN: 185 | 
335   	 0085	 90750107		i0 = i7 - (0x107)			# LN: 185 | 
336   	 0086	 98540000		xmem[i0] = a0h			# LN: 185 | 
337   	 0087				cline_185_0:			/* LN: 186 | CYCLE: 0 | RULES: () */ 
338   	 0087	 90750105		i0 = i7 - (0x105)			# LN: 186 | 
339   	 0088	 B0140000		i0 = xmem[i0]			# LN: 186 | 
340   	 0089	 80880000		call (_cl_wavread_frame_rate)			# LN: 186 | 
341   	 008A	 90750108		i0 = i7 - (0x108)			# LN: 186 | 
342   	 008B	 98540000		xmem[i0] = a0h			# LN: 186 | 
343   	 008C				cline_186_0:			/* LN: 187 | CYCLE: 0 | RULES: () */ 
344   	 008C	 90750105		i0 = i7 - (0x105)			# LN: 187 | 
345   	 008D	 B0140000		i0 = xmem[i0]			# LN: 187 | 
346   	 008E	 80880000		call (_cl_wavread_number_of_frames)			# LN: 187 | 
347   	 008F	 90750109		i0 = i7 - (0x109)			# LN: 187 | 
348   	 0090	 98540000		xmem[i0] = a0h			# LN: 187 | 
349   	 0091				cline_187_0:			/* LN: 192 | CYCLE: 0 | RULES: () */ 
350   	 0091	 90750002		i0 = i7 - (0x2)			# LN: 192 | 
351   	 0092	 B0140000		i0 = xmem[i0]			# LN: 192 | 
352   	 0093	 91750209		i1 = i7 - (521 - 0)			# LN: 192 | 
353   	 0094	 02087FFF		i0 += 1			# LN: 192 | 
354   	 0095	 B8140000		i4 = xmem[i0]			# LN: 192 | 
355   	 0096	 B1090030		i0 = i1			# LN: 192 | 
356   	 0097	 B8090031		i1 = i4			# LN: 192 | 
357   	 0098	 80880000		call (_strcpy)			# LN: 192 | 
358   	 0099				cline_192_0:			/* LN: 193 | CYCLE: 0 | RULES: () */ 
359   	 0099	 90750209		i0 = i7 - (521 - 0)			# LN: 193 | 
360   	 009A	 91750107		i1 = i7 - (0x107)			# LN: 193 | 
361   	 009B	 88140001		a0 = xmem[i1]			# LN: 193 | 
362   	 009C	 91750003		i1 = i7 - (0x3)			# LN: 193 | 
363   	 009D	 89140001		a1 = xmem[i1]			# LN: 193 | 
364   	 009E	 91750108		i1 = i7 - (0x108)			# LN: 193 | 
365   	 009F	 8C140001		b0 = xmem[i1]			# LN: 193 | 
366   	 00A0	 80880000		call (_cl_wavwrite_open)			# LN: 193 | 
367   	 00A1	 98090030		AnyReg(i0, a0h)			# LN: 193 | 
368   	 00A2	 9175020A		i1 = i7 - (0x20a)			# LN: 193 | 
369   	 00A3	 B0540001		xmem[i1] = i0			# LN: 193 | 
370   	 00A4				cline_193_0:			/* LN: 194 | CYCLE: 0 | RULES: () */ 
371   	 00A4	 9075020A		i0 = i7 - (0x20a)			# LN: 194 | 
372   	 00A5	 88140000		a0 = xmem[i0]			# LN: 194 | 
373   	 00A6	 00004E80		a0 & a0			# LN: 194 | 
374   	 00A7	 844800AC		if (a != 0) jmp (else_6)			# LN: 194 | 
375   	 00A8				cline_194_0:			/* LN: 196 | CYCLE: 0 | RULES: () */ 
376   	 00A8	 A0050000		i0 = (0) + (_string_const_1)			# LN: 196 | 
377   	 00A9	 80880000		call (_printf)			# LN: 196 | 
378   	 00AA				cline_196_0:			/* LN: 197 | CYCLE: 0 | RULES: () */ 
379   	 00AA	 886AFFFF		halfword(a0) = (0xffff)			# LN: 197 | 
380   	 00AB	 8008011F		jmp (__epilogue_224)			# LN: 197 | 
381   	 00AC				cline_197_0:			/* LN: 210 | CYCLE: 0 | RULES: () */ 
382   	 00AC				endif_6:			/* LN: 194 | CYCLE: 0 | RULES: () */ 
383   	 00AC				else_6:			/* LN: 194 | CYCLE: 0 | RULES: () */ 
384   	 00AC	 9075020B		i0 = i7 - (0x20b)			# LN: 210 | 
385   	 00AD	 00004DC0		a0 = 0			# LN: 210 | 
386   	 00AE	 98540000		xmem[i0] = a0h			# LN: 210 | 
387   	 00AF				for_6:			/* LN: 210 | CYCLE: 0 | RULES: () */ 
388   	 00AF	 90750109		i0 = i7 - (0x109)			# LN: 210 | 
389   	 00B0	 88140000		a0 = xmem[i0]			# LN: 210 | 
390   	 00B1	 894A0010		uhalfword(a1) = (0x10)			# LN: 210 | 
391   	 00B2	 80880000		call (__div)			# LN: 210 | 
392   	 00B3	 9075020B		i0 = i7 - (0x20b)			# LN: 210 | 
393   	 00B4	 89140000		a1 = xmem[i0]			# LN: 210 | 
394   	 00B5	 00004F01		a1 - a0			# LN: 210 | 
395   	 00B6	 84C80117		if (a >= 0) jmp (for_end_6)			# LN: 210 | 
396   	 00B7				cline_210_0:			/* LN: 212 | CYCLE: 0 | RULES: () */ 
397   	 00B7	 9075020C		i0 = i7 - (0x20c)			# LN: 212 | 
398   	 00B8	 00004DC0		a0 = 0			# LN: 212 | 
399   	 00B9	 98540000		xmem[i0] = a0h			# LN: 212 | 
400   	 00BA	 810000E2		do (0x10), label_end_98			# LN: 212 | 
401   	 00BB				cline_212_0:			/* LN: 214 | CYCLE: 0 | RULES: () */ 
402   	 00BB				label_begin_98:			/* LN: 212 | CYCLE: 0 | RULES: () */ 
403   	 00BB	 9075020D		i0 = i7 - (0x20d)			# LN: 214 | 
404   	 00BC	 00004DC0		a0 = 0			# LN: 214 | 
405   	 00BD	 98540000		xmem[i0] = a0h			# LN: 214 | 
406   	 00BE				for_8:			/* LN: 214 | CYCLE: 0 | RULES: () */ 
407   	 00BE	 9075020D		i0 = i7 - (0x20d)			# LN: 214 | 
408   	 00BF	 88140000		a0 = xmem[i0]			# LN: 214 | 
409   	 00C0	 90750106		i0 = i7 - (0x106)			# LN: 214 | 
410   	 00C1	 89140000		a1 = xmem[i0]			# LN: 214 | 
411   	 00C2	 00004F08		a0 - a1			# LN: 214 | 
412   	 00C3	 84C800DD		if (a >= 0) jmp (for_end_8)			# LN: 214 | 
413   	 00C4				cline_214_0:			/* LN: 216 | CYCLE: 0 | RULES: () */ 
414   	 00C4	 90750105		i0 = i7 - (0x105)			# LN: 216 | 
415   	 00C5	 B0140000		i0 = xmem[i0]			# LN: 216 | 
416   	 00C6	 80880000		call (_cl_wavread_recvsample)			# LN: 216 | 
417   	 00C7	 9075020E		i0 = i7 - (0x20e)			# LN: 216 | 
418   	 00C8	 98540000		xmem[i0] = a0h			# LN: 216 | 
419   	 00C9				cline_216_0:			/* LN: 217 | CYCLE: 0 | RULES: () */ 
420   	 00C9	 9075020D		i0 = i7 - (0x20d)			# LN: 217 | 
421   	 00CA	 88140000		a0 = xmem[i0]			# LN: 217 | 
422   	 00CB	 00004EC0		a0 = a0 << 4			# LN: 217 | 
423   	 00CC	 48707FFF		i0 = a0			# LN: 217 | 
424   	 00CD	 9175020C		i1 = i7 - (0x20c)			# LN: 217 | 
425   	 00CE	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 217 | 
426   	 00CF	 88140001		a0 = xmem[i1]			# LN: 217 | 
427   	 00D0	 09707FFF		a1 = i0			# LN: 217 | 
428   	 00D1	 00004480		a0 = a1 + a0			# LN: 217 | 
429   	 00D2	 98090030		AnyReg(i0, a0h)			# LN: 217 | 
430   	 00D3	 9175020E		i1 = i7 - (0x20e)			# LN: 217 | 
431   	 00D4	 88140001		a0 = xmem[i1]			# LN: 217 | 
432   	 00D5	 98540000		xmem[i0] = a0h			# LN: 217 | 
433   	 00D6				cline_217_0:			/* LN: 214 | CYCLE: 0 | RULES: () */ 
434   	 00D6				init_latch_label_6:			/* LN: 218 | CYCLE: 0 | RULES: () */ 
435   	 00D6	 9075020D		i0 = i7 - (0x20d)			# LN: 214 | 
436   	 00D7	 88140000		a0 = xmem[i0]			# LN: 214 | 
437   	 00D8	 894A0001		uhalfword(a1) = (0x1)			# LN: 214 | 
438   	 00D9	 00004408		a0 = a0 + a1			# LN: 214 | 
439   	 00DA	 9075020D		i0 = i7 - (0x20d)			# LN: 214 | 
440   	 00DB	 98540000		xmem[i0] = a0h			# LN: 214 | 
441   	 00DC	 800800BE		jmp (for_8)			# LN: 214 | 
442   	 00DD				cline_214_1:			/* LN: 212 | CYCLE: 0 | RULES: () */ 
443   	 00DD				init_latch_label_7:			/* LN: 219 | CYCLE: 0 | RULES: () */ 
444   	 00DD				for_end_8:			/* LN: 214 | CYCLE: 0 | RULES: () */ 
445   	 00DD	 9075020C		i0 = i7 - (0x20c)			# LN: 212 | 
446   	 00DE	 88140000		a0 = xmem[i0]			# LN: 212 | 
447   	 00DF	 894A0001		uhalfword(a1) = (0x1)			# LN: 212 | 
448   	 00E0	 00004408		a0 = a0 + a1			# LN: 212 | 
449   	 00E1	 9075020C		i0 = i7 - (0x20c)			# LN: 212 | 
450   	 00E2				label_end_98:			# LN: 212 | CYCLE: 5 | RULES: ()
451   	 00E2	 98540000		xmem[i0] = a0h			# LN: 212 | 
452   	 00E3				cline_212_1:			/* LN: 221 | CYCLE: 0 | RULES: () */ 
453   	 00E3				for_end_7:			/* LN: 212 | CYCLE: 0 | RULES: () */ 
454   	 00E3	 80880122		call (_processing)			# LN: 221 | 
455   	 00E4				cline_221_0:			/* LN: 223 | CYCLE: 0 | RULES: () */ 
456   	 00E4	 9075020C		i0 = i7 - (0x20c)			# LN: 223 | 
457   	 00E5	 00004DC0		a0 = 0			# LN: 223 | 
458   	 00E6	 98540000		xmem[i0] = a0h			# LN: 223 | 
459   	 00E7	 8100010F		do (0x10), label_end_99			# LN: 223 | 
460   	 00E8				cline_223_0:			/* LN: 225 | CYCLE: 0 | RULES: () */ 
461   	 00E8				label_begin_99:			/* LN: 223 | CYCLE: 0 | RULES: () */ 
462   	 00E8	 9075020D		i0 = i7 - (0x20d)			# LN: 225 | 
463   	 00E9	 00004DC0		a0 = 0			# LN: 225 | 
464   	 00EA	 98540000		xmem[i0] = a0h			# LN: 225 | 
465   	 00EB				for_10:			/* LN: 225 | CYCLE: 0 | RULES: () */ 
466   	 00EB	 9075020D		i0 = i7 - (0x20d)			# LN: 225 | 
467   	 00EC	 88140000		a0 = xmem[i0]			# LN: 225 | 
468   	 00ED	 90750003		i0 = i7 - (0x3)			# LN: 225 | 
469   	 00EE	 89140000		a1 = xmem[i0]			# LN: 225 | 
470   	 00EF	 00004F08		a0 - a1			# LN: 225 | 
471   	 00F0	 84C8010A		if (a >= 0) jmp (for_end_10)			# LN: 225 | 
472   	 00F1				cline_225_0:			/* LN: 227 | CYCLE: 0 | RULES: () */ 
473   	 00F1	 9075020D		i0 = i7 - (0x20d)			# LN: 227 | 
474   	 00F2	 88140000		a0 = xmem[i0]			# LN: 227 | 
475   	 00F3	 00004EC0		a0 = a0 << 4			# LN: 227 | 
476   	 00F4	 48707FFF		i0 = a0			# LN: 227 | 
477   	 00F5	 9175020C		i1 = i7 - (0x20c)			# LN: 227 | 
478   	 00F6	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 227 | 
479   	 00F7	 88140001		a0 = xmem[i1]			# LN: 227 | 
480   	 00F8	 09707FFF		a1 = i0			# LN: 227 | 
481   	 00F9	 00004480		a0 = a1 + a0			# LN: 227 | 
482   	 00FA	 98090030		AnyReg(i0, a0h)			# LN: 227 | 
483   	 00FB	 9175020E		i1 = i7 - (0x20e)			# LN: 227 | 
484   	 00FC	 88140000		a0 = xmem[i0]			# LN: 227 | 
485   	 00FD	 98540001		xmem[i1] = a0h			# LN: 227 | 
486   	 00FE				cline_227_0:			/* LN: 228 | CYCLE: 0 | RULES: () */ 
487   	 00FE	 9075020A		i0 = i7 - (0x20a)			# LN: 228 | 
488   	 00FF	 9175020E		i1 = i7 - (0x20e)			# LN: 228 | 
489   	 0100	 88140001		a0 = xmem[i1]			# LN: 228 | 
490   	 0101	 B0140000		i0 = xmem[i0]			# LN: 228 | 
491   	 0102	 80880000		call (_cl_wavwrite_sendsample)			# LN: 228 | 
492   	 0103				cline_228_0:			/* LN: 225 | CYCLE: 0 | RULES: () */ 
493   	 0103				init_latch_label_8:			/* LN: 229 | CYCLE: 0 | RULES: () */ 
494   	 0103	 9075020D		i0 = i7 - (0x20d)			# LN: 225 | 
495   	 0104	 88140000		a0 = xmem[i0]			# LN: 225 | 
496   	 0105	 894A0001		uhalfword(a1) = (0x1)			# LN: 225 | 
497   	 0106	 00004408		a0 = a0 + a1			# LN: 225 | 
498   	 0107	 9075020D		i0 = i7 - (0x20d)			# LN: 225 | 
499   	 0108	 98540000		xmem[i0] = a0h			# LN: 225 | 
500   	 0109	 800800EB		jmp (for_10)			# LN: 225 | 
501   	 010A				cline_225_1:			/* LN: 223 | CYCLE: 0 | RULES: () */ 
502   	 010A				init_latch_label_9:			/* LN: 230 | CYCLE: 0 | RULES: () */ 
503   	 010A				for_end_10:			/* LN: 225 | CYCLE: 0 | RULES: () */ 
504   	 010A	 9075020C		i0 = i7 - (0x20c)			# LN: 223 | 
505   	 010B	 88140000		a0 = xmem[i0]			# LN: 223 | 
506   	 010C	 894A0001		uhalfword(a1) = (0x1)			# LN: 223 | 
507   	 010D	 00004408		a0 = a0 + a1			# LN: 223 | 
508   	 010E	 9075020C		i0 = i7 - (0x20c)			# LN: 223 | 
509   	 010F				label_end_99:			# LN: 223 | CYCLE: 5 | RULES: ()
510   	 010F	 98540000		xmem[i0] = a0h			# LN: 223 | 
511   	 0110				cline_223_1:			/* LN: 210 | CYCLE: 0 | RULES: () */ 
512   	 0110				init_latch_label_10:			/* LN: 231 | CYCLE: 0 | RULES: () */ 
513   	 0110				for_end_9:			/* LN: 223 | CYCLE: 0 | RULES: () */ 
514   	 0110	 9075020B		i0 = i7 - (0x20b)			# LN: 210 | 
515   	 0111	 88140000		a0 = xmem[i0]			# LN: 210 | 
516   	 0112	 894A0001		uhalfword(a1) = (0x1)			# LN: 210 | 
517   	 0113	 00004408		a0 = a0 + a1			# LN: 210 | 
518   	 0114	 9075020B		i0 = i7 - (0x20b)			# LN: 210 | 
519   	 0115	 98540000		xmem[i0] = a0h			# LN: 210 | 
520   	 0116	 800800AF		jmp (for_6)			# LN: 210 | 
521   	 0117				cline_210_1:			/* LN: 236 | CYCLE: 0 | RULES: () */ 
522   	 0117				for_end_6:			/* LN: 210 | CYCLE: 0 | RULES: () */ 
523   	 0117	 90750105		i0 = i7 - (0x105)			# LN: 236 | 
524   	 0118	 B0140000		i0 = xmem[i0]			# LN: 236 | 
525   	 0119	 80880000		call (_cl_wavread_close)			# LN: 236 | 
526   	 011A				cline_236_0:			/* LN: 237 | CYCLE: 0 | RULES: () */ 
527   	 011A	 9075020A		i0 = i7 - (0x20a)			# LN: 237 | 
528   	 011B	 B0140000		i0 = xmem[i0]			# LN: 237 | 
529   	 011C	 80880000		call (_cl_wavwrite_close)			# LN: 237 | 
530   	 011D				cline_237_0:			/* LN: 240 | CYCLE: 0 | RULES: () */ 
531   	 011D	 00004DC0		a0 = 0			# LN: 240 | 
532   	 011E	 8008011F		jmp (__epilogue_224)			# LN: 240 | 
533   	 011F				cline_240_0:			/* LN: 241 | CYCLE: 0 | RULES: () */ 
534   	 011F				__epilogue_224:			/* LN: 241 | CYCLE: 0 | RULES: () */ 
535   	 011F	 9775020E		i7 = i7 - (0x20e)			# LN: 241 | 
536   	 0120	 02177FFF		i7 -= 1			# LN: 241 | 
537   	 0121	 81880000		ret			# LN: 241 | 
538   						
539   						
540   						
541   	 0122				_processing:			/* LN: 65 | CYCLE: 0 | RULES: () */ 
542   	 0122	 BB540007		xmem[i7] = i7			# LN: 65 | 
543   	 0123	 020F7FFF		i7 += 1			# LN: 65 | 
544   	 0124	 8775000C		i7 = i7 + (0xc)			# LN: 65 | 
545   	 0125				cline_65_0:			/* LN: 76 | CYCLE: 0 | RULES: () */ 
546   	 0125	 90750001		i0 = i7 - (0x1)			# LN: 76 | 
547   	 0126	 884A0000		uhalfword(a0) = (_sampleBuffer + 0)			# LN: 76 | 
548   	 0127	 88540000		xmem[i0] = a0			# LN: 76 | 
549   	 0128				cline_76_0:			/* LN: 77 | CYCLE: 0 | RULES: () */ 
550   	 0128	 90750002		i0 = i7 - (0x2)			# LN: 77 | 
551   	 0129	 884A0010		uhalfword(a0) = (_sampleBuffer + 16)			# LN: 77 | 
552   	 012A	 88540000		xmem[i0] = a0			# LN: 77 | 
553   	 012B				cline_77_0:			/* LN: 78 | CYCLE: 0 | RULES: () */ 
554   	 012B	 90750003		i0 = i7 - (0x3)			# LN: 78 | 
555   	 012C	 884A0050		uhalfword(a0) = (_sampleBuffer + 80)			# LN: 78 | 
556   	 012D	 88540000		xmem[i0] = a0			# LN: 78 | 
557   	 012E				cline_78_0:			/* LN: 80 | CYCLE: 0 | RULES: () */ 
558   	 012E	 90750004		i0 = i7 - (0x4)			# LN: 80 | 
559   	 012F	 00004DC0		a0 = 0			# LN: 80 | 
560   	 0130	 98540000		xmem[i0] = a0h			# LN: 80 | 
561   	 0131	 8100015C		do (0x10), label_end_93			# LN: 80 | 
562   	 0132				cline_80_0:			/* LN: 82 | CYCLE: 0 | RULES: () */ 
563   	 0132				label_begin_93:			/* LN: 80 | CYCLE: 0 | RULES: () */ 
564   	 0132	 90750001		i0 = i7 - (0x1)			# LN: 82 | 
565   	 0133	 B0140000		i0 = xmem[i0]			# LN: 82 | 
566   	 0134	 80040000		x0 = xmem[_inputGain + 0]			# LN: 82 | 
567   	 0135	 81140000		x1 = xmem[i0]			# LN: 82 | 
568   	 0136	 90750001		i0 = i7 - (0x1)			# LN: 82 | 
569   	 0137	 B0140000		i0 = xmem[i0]			# LN: 82 | 
570   	 0138	 00002020		a0 = x1 * x0			# LN: 82 | 
571   	 0139	 88540000		xmem[i0] = a0			# LN: 82 | 
572   	 013A				cline_82_0:			/* LN: 83 | CYCLE: 0 | RULES: () */ 
573   	 013A	 90750002		i0 = i7 - (0x2)			# LN: 83 | 
574   	 013B	 B0140000		i0 = xmem[i0]			# LN: 83 | 
575   	 013C	 80040000		x0 = xmem[_inputGain + 0]			# LN: 83 | 
576   	 013D	 81140000		x1 = xmem[i0]			# LN: 83 | 
577   	 013E	 90750002		i0 = i7 - (0x2)			# LN: 83 | 
578   	 013F	 B0140000		i0 = xmem[i0]			# LN: 83 | 
579   	 0140	 00002020		a0 = x1 * x0			# LN: 83 | 
580   	 0141	 88540000		xmem[i0] = a0			# LN: 83 | 
581   	 0142				cline_83_0:			/* LN: 84 | CYCLE: 0 | RULES: () */ 
582   	 0142	 90750001		i0 = i7 - (0x1)			# LN: 84 | 
583   	 0143	 B0140000		i0 = xmem[i0]			# LN: 84 | 
584   	 0144	 91750003		i1 = i7 - (0x3)			# LN: 84 | 
585   	 0145	 B1140001		i1 = xmem[i1]			# LN: 84 | 
586   	 0146	 88140000		a0 = xmem[i0]			# LN: 84 | 
587   	 0147	 98540001		xmem[i1] = a0h			# LN: 84 | 
588   	 0148				cline_84_0:			/* LN: 86 | CYCLE: 0 | RULES: () */ 
589   	 0148	 90750001		i0 = i7 - (0x1)			# LN: 86 | 
590   	 0149	 B0140000		i0 = xmem[i0]			# LN: 86 | 
591   	 014A	 91750001		i1 = i7 - (0x1)			# LN: 86 | 
592   	 014B	 02087FFF		i0 += 1			# LN: 86 | 
593   	 014C	 B0540001		xmem[i1] = i0			# LN: 86 | 
594   	 014D				cline_86_0:			/* LN: 87 | CYCLE: 0 | RULES: () */ 
595   	 014D	 90750002		i0 = i7 - (0x2)			# LN: 87 | 
596   	 014E	 B0140000		i0 = xmem[i0]			# LN: 87 | 
597   	 014F	 91750002		i1 = i7 - (0x2)			# LN: 87 | 
598   	 0150	 02087FFF		i0 += 1			# LN: 87 | 
599   	 0151	 B0540001		xmem[i1] = i0			# LN: 87 | 
600   	 0152				cline_87_0:			/* LN: 88 | CYCLE: 0 | RULES: () */ 
601   	 0152	 90750003		i0 = i7 - (0x3)			# LN: 88 | 
602   	 0153	 B0140000		i0 = xmem[i0]			# LN: 88 | 
603   	 0154	 91750003		i1 = i7 - (0x3)			# LN: 88 | 
604   	 0155	 02087FFF		i0 += 1			# LN: 88 | 
605   	 0156	 B0540001		xmem[i1] = i0			# LN: 88 | 
606   	 0157				cline_88_0:			/* LN: 80 | CYCLE: 0 | RULES: () */ 
607   	 0157				init_latch_label_1:			/* LN: 89 | CYCLE: 0 | RULES: () */ 
608   	 0157	 90750004		i0 = i7 - (0x4)			# LN: 80 | 
609   	 0158	 88140000		a0 = xmem[i0]			# LN: 80 | 
610   	 0159	 894A0001		uhalfword(a1) = (0x1)			# LN: 80 | 
611   	 015A	 00004408		a0 = a0 + a1			# LN: 80 | 
612   	 015B	 90750004		i0 = i7 - (0x4)			# LN: 80 | 
613   	 015C				label_end_93:			# LN: 80 | CYCLE: 5 | RULES: ()
614   	 015C	 98540000		xmem[i0] = a0h			# LN: 80 | 
615   	 015D				cline_80_1:			/* LN: 91 | CYCLE: 0 | RULES: () */ 
616   	 015D				for_end_1:			/* LN: 80 | CYCLE: 0 | RULES: () */ 
617   	 015D	 80880000		call (_gst_audio_dynamic_transform_compressor_float)			# LN: 91 | 
618   	 015E				cline_91_0:			/* LN: 95 | CYCLE: 0 | RULES: () */ 
619   	 015E	 90750001		i0 = i7 - (0x1)			# LN: 95 | 
620   	 015F	 884A0000		uhalfword(a0) = (_sampleBuffer + 0)			# LN: 95 | 
621   	 0160	 88540000		xmem[i0] = a0			# LN: 95 | 
622   	 0161				cline_95_0:			/* LN: 96 | CYCLE: 0 | RULES: () */ 
623   	 0161	 90750005		i0 = i7 - (0x5)			# LN: 96 | 
624   	 0162	 884A0030		uhalfword(a0) = (_sampleBuffer + 48)			# LN: 96 | 
625   	 0163	 88540000		xmem[i0] = a0			# LN: 96 | 
626   	 0164				cline_96_0:			/* LN: 97 | CYCLE: 0 | RULES: () */ 
627   	 0164	 90750003		i0 = i7 - (0x3)			# LN: 97 | 
628   	 0165	 884A0050		uhalfword(a0) = (_sampleBuffer + 80)			# LN: 97 | 
629   	 0166	 88540000		xmem[i0] = a0			# LN: 97 | 
630   	 0167				cline_97_0:			/* LN: 99 | CYCLE: 0 | RULES: () */ 
631   	 0167	 88040000		a0 = xmem[_mode + 0]			# LN: 99 | 
632   	 0168	 00004E80		a0 & a0			# LN: 99 | 
633   	 0169	 844801A8		if (a != 0) jmp (else_4)			# LN: 99 | 
634   	 016A				cline_99_0:			/* LN: 101 | CYCLE: 0 | RULES: () */ 
635   	 016A	 90750004		i0 = i7 - (0x4)			# LN: 101 | 
636   	 016B	 00004DC0		a0 = 0			# LN: 101 | 
637   	 016C	 98540000		xmem[i0] = a0h			# LN: 101 | 
638   	 016D	 810001A6		do (0x10), label_end_94			# LN: 101 | 
639   	 016E				cline_101_0:			/* LN: 103 | CYCLE: 0 | RULES: () */ 
640   	 016E				label_begin_94:			/* LN: 101 | CYCLE: 0 | RULES: () */ 
641   	 016E	 90750001		i0 = i7 - (0x1)			# LN: 103 | 
642   	 016F	 B0140000		i0 = xmem[i0]			# LN: 103 | 
643   	 0170	 A1040000		a1g = xmem[_modeGain + 0]			# LN: 103 | 
644   	 0171	 88140000		a0 = xmem[i0]			# LN: 103 | 
645   	 0172	 99040001		a1h = xmem[_modeGain + 1]			# LN: 103 | 
646   	 0173	 91040002		a1l = xmem[_modeGain + 2]			# LN: 103 | 
647   	 0174	 80880000		call (__mul_sat_laccum)			# LN: 103 | 
648   	 0175	 90750008		i0 = i7 - (0x8)			# LN: 103 | 
649   	 0176	 A0540010		xmem[i0] = a0g; i0 += 1			# LN: 103, 103 | 
650   	 0177	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 103, 103 | 
651   	 0178	 90540000		xmem[i0] = a0l			# LN: 103 | 
652   	 0179				cline_103_0:			/* LN: 104 | CYCLE: 0 | RULES: () */ 
653   	 0179	 90750003		i0 = i7 - (0x3)			# LN: 104 | 
654   	 017A	 B0140000		i0 = xmem[i0]			# LN: 104 | 
655   	 017B	 A1040006		a1g = xmem[_modeGain + 6]			# LN: 104 | 
656   	 017C	 88140000		a0 = xmem[i0]			# LN: 104 | 
657   	 017D	 99040007		a1h = xmem[_modeGain + 7]			# LN: 104 | 
658   	 017E	 91040008		a1l = xmem[_modeGain + 8]			# LN: 104 | 
659   	 017F	 80880000		call (__mul_sat_laccum)			# LN: 104 | 
660   	 0180	 9075000B		i0 = i7 - (0xb)			# LN: 104 | 
661   	 0181	 A0540010		xmem[i0] = a0g; i0 += 1			# LN: 104, 104 | 
662   	 0182	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 104, 104 | 
663   	 0183	 90540000		xmem[i0] = a0l			# LN: 104 | 
664   	 0184				cline_104_0:			/* LN: 106 | CYCLE: 0 | RULES: () */ 
665   	 0184	 90750008		i0 = i7 - (0x8)			# LN: 106 | 
666   	 0185	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 106, 106 | 
667   	 0186	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 106, 106 | 
668   	 0187	 91750005		i1 = i7 - (0x5)			# LN: 106 | 
669   	 0188	 B1140001		i1 = xmem[i1]			# LN: 106 | 
670   	 0189	 90140000		a0l = xmem[i0]			# LN: 106 | 
671   	 018A	 88540001		xmem[i1] = a0			# LN: 106 | 
672   	 018B				cline_106_0:			/* LN: 107 | CYCLE: 0 | RULES: () */ 
673   	 018B	 9075000B		i0 = i7 - (0xb)			# LN: 107 | 
674   	 018C	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 107, 107 | 
675   	 018D	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 107, 107 | 
676   	 018E	 91750003		i1 = i7 - (0x3)			# LN: 107 | 
677   	 018F	 B1140001		i1 = xmem[i1]			# LN: 107 | 
678   	 0190	 90140000		a0l = xmem[i0]			# LN: 107 | 
679   	 0191	 88540001		xmem[i1] = a0			# LN: 107 | 
680   	 0192				cline_107_0:			/* LN: 109 | CYCLE: 0 | RULES: () */ 
681   	 0192	 90750001		i0 = i7 - (0x1)			# LN: 109 | 
682   	 0193	 B0140000		i0 = xmem[i0]			# LN: 109 | 
683   	 0194	 91750001		i1 = i7 - (0x1)			# LN: 109 | 
684   	 0195	 02087FFF		i0 += 1			# LN: 109 | 
685   	 0196	 B0540001		xmem[i1] = i0			# LN: 109 | 
686   	 0197				cline_109_0:			/* LN: 110 | CYCLE: 0 | RULES: () */ 
687   	 0197	 90750005		i0 = i7 - (0x5)			# LN: 110 | 
688   	 0198	 B0140000		i0 = xmem[i0]			# LN: 110 | 
689   	 0199	 91750005		i1 = i7 - (0x5)			# LN: 110 | 
690   	 019A	 02087FFF		i0 += 1			# LN: 110 | 
691   	 019B	 B0540001		xmem[i1] = i0			# LN: 110 | 
692   	 019C				cline_110_0:			/* LN: 111 | CYCLE: 0 | RULES: () */ 
693   	 019C	 90750003		i0 = i7 - (0x3)			# LN: 111 | 
694   	 019D	 B0140000		i0 = xmem[i0]			# LN: 111 | 
695   	 019E	 91750003		i1 = i7 - (0x3)			# LN: 111 | 
696   	 019F	 02087FFF		i0 += 1			# LN: 111 | 
697   	 01A0	 B0540001		xmem[i1] = i0			# LN: 111 | 
698   	 01A1				cline_111_0:			/* LN: 101 | CYCLE: 0 | RULES: () */ 
699   	 01A1				init_latch_label_2:			/* LN: 112 | CYCLE: 0 | RULES: () */ 
700   	 01A1	 90750004		i0 = i7 - (0x4)			# LN: 101 | 
701   	 01A2	 88140000		a0 = xmem[i0]			# LN: 101 | 
702   	 01A3	 894A0001		uhalfword(a1) = (0x1)			# LN: 101 | 
703   	 01A4	 00004408		a0 = a0 + a1			# LN: 101 | 
704   	 01A5	 90750004		i0 = i7 - (0x4)			# LN: 101 | 
705   	 01A6				label_end_94:			# LN: 101 | CYCLE: 5 | RULES: ()
706   	 01A6	 98540000		xmem[i0] = a0h			# LN: 101 | 
707   	 01A7				for_end_2:			/* LN: 101 | CYCLE: 0 | RULES: () */ 
708   	 01A7	 800801E5		jmp (endif_4)			# LN: 101 | 
709   	 01A8				cline_101_1:			/* LN: 116 | CYCLE: 0 | RULES: () */ 
710   	 01A8				else_4:			/* LN: 99 | CYCLE: 0 | RULES: () */ 
711   	 01A8	 90750004		i0 = i7 - (0x4)			# LN: 116 | 
712   	 01A9	 00004DC0		a0 = 0			# LN: 116 | 
713   	 01AA	 98540000		xmem[i0] = a0h			# LN: 116 | 
714   	 01AB	 810001E4		do (0x10), label_end_95			# LN: 116 | 
715   	 01AC				cline_116_0:			/* LN: 118 | CYCLE: 0 | RULES: () */ 
716   	 01AC				label_begin_95:			/* LN: 116 | CYCLE: 0 | RULES: () */ 
717   	 01AC	 90750001		i0 = i7 - (0x1)			# LN: 118 | 
718   	 01AD	 B0140000		i0 = xmem[i0]			# LN: 118 | 
719   	 01AE	 A1040003		a1g = xmem[_modeGain + 3]			# LN: 118 | 
720   	 01AF	 88140000		a0 = xmem[i0]			# LN: 118 | 
721   	 01B0	 99040004		a1h = xmem[_modeGain + 4]			# LN: 118 | 
722   	 01B1	 91040005		a1l = xmem[_modeGain + 5]			# LN: 118 | 
723   	 01B2	 80880000		call (__mul_sat_laccum)			# LN: 118 | 
724   	 01B3	 90750008		i0 = i7 - (0x8)			# LN: 118 | 
725   	 01B4	 A0540010		xmem[i0] = a0g; i0 += 1			# LN: 118, 118 | 
726   	 01B5	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 118, 118 | 
727   	 01B6	 90540000		xmem[i0] = a0l			# LN: 118 | 
728   	 01B7				cline_118_0:			/* LN: 119 | CYCLE: 0 | RULES: () */ 
729   	 01B7	 90750003		i0 = i7 - (0x3)			# LN: 119 | 
730   	 01B8	 B0140000		i0 = xmem[i0]			# LN: 119 | 
731   	 01B9	 A1040009		a1g = xmem[_modeGain + 9]			# LN: 119 | 
732   	 01BA	 88140000		a0 = xmem[i0]			# LN: 119 | 
733   	 01BB	 9904000A		a1h = xmem[_modeGain + 10]			# LN: 119 | 
734   	 01BC	 9104000B		a1l = xmem[_modeGain + 11]			# LN: 119 | 
735   	 01BD	 80880000		call (__mul_sat_laccum)			# LN: 119 | 
736   	 01BE	 9075000B		i0 = i7 - (0xb)			# LN: 119 | 
737   	 01BF	 A0540010		xmem[i0] = a0g; i0 += 1			# LN: 119, 119 | 
738   	 01C0	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 119, 119 | 
739   	 01C1	 90540000		xmem[i0] = a0l			# LN: 119 | 
740   	 01C2				cline_119_0:			/* LN: 121 | CYCLE: 0 | RULES: () */ 
741   	 01C2	 90750008		i0 = i7 - (0x8)			# LN: 121 | 
742   	 01C3	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 121, 121 | 
743   	 01C4	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 121, 121 | 
744   	 01C5	 91750005		i1 = i7 - (0x5)			# LN: 121 | 
745   	 01C6	 B1140001		i1 = xmem[i1]			# LN: 121 | 
746   	 01C7	 90140000		a0l = xmem[i0]			# LN: 121 | 
747   	 01C8	 88540001		xmem[i1] = a0			# LN: 121 | 
748   	 01C9				cline_121_0:			/* LN: 122 | CYCLE: 0 | RULES: () */ 
749   	 01C9	 9075000B		i0 = i7 - (0xb)			# LN: 122 | 
750   	 01CA	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 122, 122 | 
751   	 01CB	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 122, 122 | 
752   	 01CC	 91750003		i1 = i7 - (0x3)			# LN: 122 | 
753   	 01CD	 B1140001		i1 = xmem[i1]			# LN: 122 | 
754   	 01CE	 90140000		a0l = xmem[i0]			# LN: 122 | 
755   	 01CF	 88540001		xmem[i1] = a0			# LN: 122 | 
756   	 01D0				cline_122_0:			/* LN: 124 | CYCLE: 0 | RULES: () */ 
757   	 01D0	 90750001		i0 = i7 - (0x1)			# LN: 124 | 
758   	 01D1	 B0140000		i0 = xmem[i0]			# LN: 124 | 
759   	 01D2	 91750001		i1 = i7 - (0x1)			# LN: 124 | 
760   	 01D3	 02087FFF		i0 += 1			# LN: 124 | 
761   	 01D4	 B0540001		xmem[i1] = i0			# LN: 124 | 
762   	 01D5				cline_124_0:			/* LN: 125 | CYCLE: 0 | RULES: () */ 
763   	 01D5	 90750005		i0 = i7 - (0x5)			# LN: 125 | 
764   	 01D6	 B0140000		i0 = xmem[i0]			# LN: 125 | 
765   	 01D7	 91750005		i1 = i7 - (0x5)			# LN: 125 | 
766   	 01D8	 02087FFF		i0 += 1			# LN: 125 | 
767   	 01D9	 B0540001		xmem[i1] = i0			# LN: 125 | 
768   	 01DA				cline_125_0:			/* LN: 126 | CYCLE: 0 | RULES: () */ 
769   	 01DA	 90750003		i0 = i7 - (0x3)			# LN: 126 | 
770   	 01DB	 B0140000		i0 = xmem[i0]			# LN: 126 | 
771   	 01DC	 91750003		i1 = i7 - (0x3)			# LN: 126 | 
772   	 01DD	 02087FFF		i0 += 1			# LN: 126 | 
773   	 01DE	 B0540001		xmem[i1] = i0			# LN: 126 | 
774   	 01DF				cline_126_0:			/* LN: 116 | CYCLE: 0 | RULES: () */ 
775   	 01DF				init_latch_label_3:			/* LN: 127 | CYCLE: 0 | RULES: () */ 
776   	 01DF	 90750004		i0 = i7 - (0x4)			# LN: 116 | 
777   	 01E0	 88140000		a0 = xmem[i0]			# LN: 116 | 
778   	 01E1	 894A0001		uhalfword(a1) = (0x1)			# LN: 116 | 
779   	 01E2	 00004408		a0 = a0 + a1			# LN: 116 | 
780   	 01E3	 90750004		i0 = i7 - (0x4)			# LN: 116 | 
781   	 01E4				label_end_95:			# LN: 116 | CYCLE: 5 | RULES: ()
782   	 01E4	 98540000		xmem[i0] = a0h			# LN: 116 | 
783   	 01E5				cline_116_1:			/* LN: 132 | CYCLE: 0 | RULES: () */ 
784   	 01E5				endif_4:			/* LN: 99 | CYCLE: 0 | RULES: () */ 
785   	 01E5				for_end_3:			/* LN: 116 | CYCLE: 0 | RULES: () */ 
786   	 01E5	 90750001		i0 = i7 - (0x1)			# LN: 132 | 
787   	 01E6	 884A0000		uhalfword(a0) = (_sampleBuffer + 0)			# LN: 132 | 
788   	 01E7	 88540000		xmem[i0] = a0			# LN: 132 | 
789   	 01E8				cline_132_0:			/* LN: 133 | CYCLE: 0 | RULES: () */ 
790   	 01E8	 90750002		i0 = i7 - (0x2)			# LN: 133 | 
791   	 01E9	 884A0010		uhalfword(a0) = (_sampleBuffer + 16)			# LN: 133 | 
792   	 01EA	 88540000		xmem[i0] = a0			# LN: 133 | 
793   	 01EB				cline_133_0:			/* LN: 134 | CYCLE: 0 | RULES: () */ 
794   	 01EB	 90750005		i0 = i7 - (0x5)			# LN: 134 | 
795   	 01EC	 884A0030		uhalfword(a0) = (_sampleBuffer + 48)			# LN: 134 | 
796   	 01ED	 88540000		xmem[i0] = a0			# LN: 134 | 
797   	 01EE				cline_134_0:			/* LN: 135 | CYCLE: 0 | RULES: () */ 
798   	 01EE	 9075000C		i0 = i7 - (0xc)			# LN: 135 | 
799   	 01EF	 884A0040		uhalfword(a0) = (_sampleBuffer + 64)			# LN: 135 | 
800   	 01F0	 88540000		xmem[i0] = a0			# LN: 135 | 
801   	 01F1				cline_135_0:			/* LN: 136 | CYCLE: 0 | RULES: () */ 
802   	 01F1	 90750003		i0 = i7 - (0x3)			# LN: 136 | 
803   	 01F2	 884A0050		uhalfword(a0) = (_sampleBuffer + 80)			# LN: 136 | 
804   	 01F3	 88540000		xmem[i0] = a0			# LN: 136 | 
805   	 01F4				cline_136_0:			/* LN: 138 | CYCLE: 0 | RULES: () */ 
806   	 01F4	 90750004		i0 = i7 - (0x4)			# LN: 138 | 
807   	 01F5	 00004DC0		a0 = 0			# LN: 138 | 
808   	 01F6	 98540000		xmem[i0] = a0h			# LN: 138 | 
809   	 01F7	 8100022B		do (0x10), label_end_96			# LN: 138 | 
810   	 01F8				cline_138_0:			/* LN: 140 | CYCLE: 0 | RULES: () */ 
811   	 01F8				label_begin_96:			/* LN: 138 | CYCLE: 0 | RULES: () */ 
812   	 01F8	 90750005		i0 = i7 - (0x5)			# LN: 140 | 
813   	 01F9	 B0140000		i0 = xmem[i0]			# LN: 140 | 
814   	 01FA	 91750001		i1 = i7 - (0x1)			# LN: 140 | 
815   	 01FB	 88140000		a0 = xmem[i0]			# LN: 140 | 
816   	 01FC	 B0140001		i0 = xmem[i1]			# LN: 140 | 
817   	 01FD	 91750003		i1 = i7 - (0x3)			# LN: 140 | 
818   	 01FE	 B1140001		i1 = xmem[i1]			# LN: 140 | 
819   	 01FF	 89140000		a1 = xmem[i0]			# LN: 140 | 
820   	 0200	 19414408		a1 = xmem[i1]; a0 = a0 + a1			# LN: 140, 140 | 
821   	 0201	 90750001		i0 = i7 - (0x1)			# LN: 140 | 
822   	 0202	 B0140000		i0 = xmem[i0]			# LN: 140 | 
823   	 0203	 00004408		a0 = a0 + a1			# LN: 140 | 
824   	 0204	 98540000		xmem[i0] = a0h			# LN: 140 | 
825   	 0205				cline_140_0:			/* LN: 141 | CYCLE: 0 | RULES: () */ 
826   	 0205	 90750002		i0 = i7 - (0x2)			# LN: 141 | 
827   	 0206	 B0140000		i0 = xmem[i0]			# LN: 141 | 
828   	 0207	 807A8000		x0 = (0x8000)			# LN: 141 | 
829   	 0208	 81140000		x1 = xmem[i0]			# LN: 141 | 
830   	 0209	 9075000C		i0 = i7 - (0xc)			# LN: 141 | 
831   	 020A	 B0140000		i0 = xmem[i0]			# LN: 141 | 
832   	 020B	 00002020		a0 = x1 * x0			# LN: 141 | 
833   	 020C	 88540000		xmem[i0] = a0			# LN: 141 | 
834   	 020D				cline_141_0:			/* LN: 143 | CYCLE: 0 | RULES: () */ 
835   	 020D	 90750001		i0 = i7 - (0x1)			# LN: 143 | 
836   	 020E	 B0140000		i0 = xmem[i0]			# LN: 143 | 
837   	 020F	 91750001		i1 = i7 - (0x1)			# LN: 143 | 
838   	 0210	 02087FFF		i0 += 1			# LN: 143 | 
839   	 0211	 B0540001		xmem[i1] = i0			# LN: 143 | 
840   	 0212				cline_143_0:			/* LN: 144 | CYCLE: 0 | RULES: () */ 
841   	 0212	 90750002		i0 = i7 - (0x2)			# LN: 144 | 
842   	 0213	 B0140000		i0 = xmem[i0]			# LN: 144 | 
843   	 0214	 91750002		i1 = i7 - (0x2)			# LN: 144 | 
844   	 0215	 02087FFF		i0 += 1			# LN: 144 | 
845   	 0216	 B0540001		xmem[i1] = i0			# LN: 144 | 
846   	 0217				cline_144_0:			/* LN: 145 | CYCLE: 0 | RULES: () */ 
847   	 0217	 90750005		i0 = i7 - (0x5)			# LN: 145 | 
848   	 0218	 B0140000		i0 = xmem[i0]			# LN: 145 | 
849   	 0219	 91750005		i1 = i7 - (0x5)			# LN: 145 | 
850   	 021A	 02087FFF		i0 += 1			# LN: 145 | 
851   	 021B	 B0540001		xmem[i1] = i0			# LN: 145 | 
852   	 021C				cline_145_0:			/* LN: 146 | CYCLE: 0 | RULES: () */ 
853   	 021C	 9075000C		i0 = i7 - (0xc)			# LN: 146 | 
854   	 021D	 B0140000		i0 = xmem[i0]			# LN: 146 | 
855   	 021E	 9175000C		i1 = i7 - (0xc)			# LN: 146 | 
856   	 021F	 02087FFF		i0 += 1			# LN: 146 | 
857   	 0220	 B0540001		xmem[i1] = i0			# LN: 146 | 
858   	 0221				cline_146_0:			/* LN: 147 | CYCLE: 0 | RULES: () */ 
859   	 0221	 90750003		i0 = i7 - (0x3)			# LN: 147 | 
860   	 0222	 B0140000		i0 = xmem[i0]			# LN: 147 | 
861   	 0223	 91750003		i1 = i7 - (0x3)			# LN: 147 | 
862   	 0224	 02087FFF		i0 += 1			# LN: 147 | 
863   	 0225	 B0540001		xmem[i1] = i0			# LN: 147 | 
864   	 0226				cline_147_0:			/* LN: 138 | CYCLE: 0 | RULES: () */ 
865   	 0226				init_latch_label_4:			/* LN: 148 | CYCLE: 0 | RULES: () */ 
866   	 0226	 90750004		i0 = i7 - (0x4)			# LN: 138 | 
867   	 0227	 88140000		a0 = xmem[i0]			# LN: 138 | 
868   	 0228	 894A0001		uhalfword(a1) = (0x1)			# LN: 138 | 
869   	 0229	 00004408		a0 = a0 + a1			# LN: 138 | 
870   	 022A	 90750004		i0 = i7 - (0x4)			# LN: 138 | 
871   	 022B				label_end_96:			# LN: 138 | CYCLE: 5 | RULES: ()
872   	 022B	 98540000		xmem[i0] = a0h			# LN: 138 | 
873   	 022C				cline_138_1:			/* LN: 149 | CYCLE: 0 | RULES: () */ 
874   	 022C				for_end_4:			/* LN: 138 | CYCLE: 0 | RULES: () */ 
875   	 022C	 8008022D		jmp (__epilogue_222)			# LN: 149 | 
876   	 022D				__epilogue_222:			/* LN: 149 | CYCLE: 0 | RULES: () */ 
877   	 022D	 9775000C		i7 = i7 - (0xc)			# LN: 149 | 
878   	 022E	 02177FFF		i7 -= 1			# LN: 149 | 
879   	 022F	 81880000		ret			# LN: 149 | 
880   						(null)
				 SYMBOL TABLE 

    Name                                                                                    Type                  Value 

_COMMON_INC_PATH_                                                               					 Define                 "C:/CirrusDSP/crystal32/common/inc/"
_DSP_                                                                           					 Define                 "a"
_LOCAL_INC_PATH_                                                                					 Define                 "inc/"
_LOCAL_SRC_PATH_                                                                					 Define                 "src/"
_MUI_VERSION_                                                                   					 Define                 "020000"
_OVLY_                                                                          					 Define                 "standalone"
_OVLY_REVISION_                                                                 					 Define                 "020000"
_ROUTER_INC_PATH_                                                               					 Define                 "rom_inc/"
_SLOT_                                                                          					 Define                 "0"
_TARGET_FAMILY_                                                                 					 Define                 "crystal32"
_TOOLS_VERSION_                                                                 					 Define                 "0x0701"
_VERSION_                                                                       					 Define                 "00"
__CASM_VER__                                                                    			  Unused Variable		        0 (701H)
__div                                                                           					 External   
__epilogue_220                                                                  			         Relocatable         main_GEN_0011:004BH
__epilogue_222                                                                  			         Relocatable         main_GEN_0011:022DH
__epilogue_224                                                                  			         Relocatable         main_GEN_0011:011FH
__extractedConst_0_1                                                            			         Relocatable         main_GEN_0000:0000H
__mul_sat_laccum                                                                					 External   
__start                                                                         					 External   
_characteristics                                                                			  Public Relocatable       main_GEN_0001:0000H
_cl_wavread_bits_per_sample                                                     					 External   
_cl_wavread_close                                                               					 External   
_cl_wavread_frame_rate                                                          					 External   
_cl_wavread_getnchannels                                                        					 External   
_cl_wavread_number_of_frames                                                    					 External   
_cl_wavread_open                                                                					 External   
_cl_wavread_recvsample                                                          					 External   
_cl_wavwrite_close                                                              					 External   
_cl_wavwrite_open                                                               					 External   
_cl_wavwrite_sendsample                                                         					 External   
_gst_audio_dynamic_transform_compressor_float                                   			         Relocatable         main_GEN_0011:0000H
_inputGain                                                                      			  Public Relocatable       main_GEN_0002:0000H
_main                                                                           			  Public Relocatable       main_GEN_0011:004EH
_memset                                                                         					 External   
_mode                                                                           			  Public Relocatable       main_GEN_0003:0000H
_modeGain                                                                       			  Public Relocatable       main_GEN_0004:0000H
_output_mode                                                                    			  Public Relocatable       main_GEN_0005:0000H
_printf                                                                         					 External   
_processing                                                                     			  Public Relocatable       main_GEN_0011:0122H
_ratio                                                                          			  Public Relocatable       main_GEN_0006:0000H
_sampleBuffer                                                                   			  Public Relocatable       main_GEN_0007:0000H
_strcpy                                                                         					 External   
_string_const_0                                                                 			         Relocatable         main_GEN_0008:0000H
_string_const_1                                                                 			         Relocatable         main_GEN_0009:0000H
_threshold                                                                      			  Public Relocatable       main_GEN_0010:0000H
cline_101_0                                                                     			  Unused Relocatable        main_GEN_0011:016EH
cline_101_1                                                                     			  Unused Relocatable        main_GEN_0011:01A8H
cline_103_0                                                                     			  Unused Relocatable        main_GEN_0011:0179H
cline_104_0                                                                     			  Unused Relocatable        main_GEN_0011:0184H
cline_106_0                                                                     			  Unused Relocatable        main_GEN_0011:018BH
cline_107_0                                                                     			  Unused Relocatable        main_GEN_0011:0192H
cline_109_0                                                                     			  Unused Relocatable        main_GEN_0011:0197H
cline_110_0                                                                     			  Unused Relocatable        main_GEN_0011:019CH
cline_111_0                                                                     			  Unused Relocatable        main_GEN_0011:01A1H
cline_116_0                                                                     			  Unused Relocatable        main_GEN_0011:01ACH
cline_116_1                                                                     			  Unused Relocatable        main_GEN_0011:01E5H
cline_118_0                                                                     			  Unused Relocatable        main_GEN_0011:01B7H
cline_119_0                                                                     			  Unused Relocatable        main_GEN_0011:01C2H
cline_121_0                                                                     			  Unused Relocatable        main_GEN_0011:01C9H
cline_122_0                                                                     			  Unused Relocatable        main_GEN_0011:01D0H
cline_124_0                                                                     			  Unused Relocatable        main_GEN_0011:01D5H
cline_125_0                                                                     			  Unused Relocatable        main_GEN_0011:01DAH
cline_126_0                                                                     			  Unused Relocatable        main_GEN_0011:01DFH
cline_132_0                                                                     			  Unused Relocatable        main_GEN_0011:01E8H
cline_133_0                                                                     			  Unused Relocatable        main_GEN_0011:01EBH
cline_134_0                                                                     			  Unused Relocatable        main_GEN_0011:01EEH
cline_135_0                                                                     			  Unused Relocatable        main_GEN_0011:01F1H
cline_136_0                                                                     			  Unused Relocatable        main_GEN_0011:01F4H
cline_138_0                                                                     			  Unused Relocatable        main_GEN_0011:01F8H
cline_138_1                                                                     			  Unused Relocatable        main_GEN_0011:022CH
cline_140_0                                                                     			  Unused Relocatable        main_GEN_0011:0205H
cline_141_0                                                                     			  Unused Relocatable        main_GEN_0011:020DH
cline_143_0                                                                     			  Unused Relocatable        main_GEN_0011:0212H
cline_144_0                                                                     			  Unused Relocatable        main_GEN_0011:0217H
cline_145_0                                                                     			  Unused Relocatable        main_GEN_0011:021CH
cline_146_0                                                                     			  Unused Relocatable        main_GEN_0011:0221H
cline_147_0                                                                     			  Unused Relocatable        main_GEN_0011:0226H
cline_152_0                                                                     			  Unused Relocatable        main_GEN_0011:0055H
cline_165_0                                                                     			  Unused Relocatable        main_GEN_0011:0058H
cline_168_0                                                                     			  Unused Relocatable        main_GEN_0011:005CH
cline_168_1                                                                     			  Unused Relocatable        main_GEN_0011:0069H
cline_169_0                                                                     			  Unused Relocatable        main_GEN_0011:0063H
cline_173_0                                                                     			  Unused Relocatable        main_GEN_0011:0070H
cline_174_0                                                                     			  Unused Relocatable        main_GEN_0011:0075H
cline_175_0                                                                     			  Unused Relocatable        main_GEN_0011:0079H
cline_177_0                                                                     			  Unused Relocatable        main_GEN_0011:007BH
cline_178_0                                                                     			  Unused Relocatable        main_GEN_0011:007DH
cline_184_0                                                                     			  Unused Relocatable        main_GEN_0011:0082H
cline_185_0                                                                     			  Unused Relocatable        main_GEN_0011:0087H
cline_186_0                                                                     			  Unused Relocatable        main_GEN_0011:008CH
cline_187_0                                                                     			  Unused Relocatable        main_GEN_0011:0091H
cline_192_0                                                                     			  Unused Relocatable        main_GEN_0011:0099H
cline_193_0                                                                     			  Unused Relocatable        main_GEN_0011:00A4H
cline_194_0                                                                     			  Unused Relocatable        main_GEN_0011:00A8H
cline_196_0                                                                     			  Unused Relocatable        main_GEN_0011:00AAH
cline_197_0                                                                     			  Unused Relocatable        main_GEN_0011:00ACH
cline_210_0                                                                     			  Unused Relocatable        main_GEN_0011:00B7H
cline_210_1                                                                     			  Unused Relocatable        main_GEN_0011:0117H
cline_212_0                                                                     			  Unused Relocatable        main_GEN_0011:00BBH
cline_212_1                                                                     			  Unused Relocatable        main_GEN_0011:00E3H
cline_214_0                                                                     			  Unused Relocatable        main_GEN_0011:00C4H
cline_214_1                                                                     			  Unused Relocatable        main_GEN_0011:00DDH
cline_216_0                                                                     			  Unused Relocatable        main_GEN_0011:00C9H
cline_217_0                                                                     			  Unused Relocatable        main_GEN_0011:00D6H
cline_221_0                                                                     			  Unused Relocatable        main_GEN_0011:00E4H
cline_223_0                                                                     			  Unused Relocatable        main_GEN_0011:00E8H
cline_223_1                                                                     			  Unused Relocatable        main_GEN_0011:0110H
cline_225_0                                                                     			  Unused Relocatable        main_GEN_0011:00F1H
cline_225_1                                                                     			  Unused Relocatable        main_GEN_0011:010AH
cline_227_0                                                                     			  Unused Relocatable        main_GEN_0011:00FEH
cline_228_0                                                                     			  Unused Relocatable        main_GEN_0011:0103H
cline_236_0                                                                     			  Unused Relocatable        main_GEN_0011:011AH
cline_237_0                                                                     			  Unused Relocatable        main_GEN_0011:011DH
cline_240_0                                                                     			  Unused Relocatable        main_GEN_0011:011FH
cline_34_0                                                                      			  Unused Relocatable        main_GEN_0011:0003H
cline_40_0                                                                      			  Unused Relocatable        main_GEN_0011:0006H
cline_43_0                                                                      			  Unused Relocatable        main_GEN_0011:000AH
cline_44_0                                                                      			  Unused Relocatable        main_GEN_0011:000BH
cline_46_0                                                                      			  Unused Relocatable        main_GEN_0011:000EH
cline_48_0                                                                      			  Unused Relocatable        main_GEN_0011:0012H
cline_48_1                                                                      			  Unused Relocatable        main_GEN_0011:004AH
cline_50_0                                                                      			  Unused Relocatable        main_GEN_0011:0017H
cline_52_0                                                                      			  Unused Relocatable        main_GEN_0011:001CH
cline_53_0                                                                      			  Unused Relocatable        main_GEN_0011:0027H
cline_55_0                                                                      			  Unused Relocatable        main_GEN_0011:002DH
cline_56_0                                                                      			  Unused Relocatable        main_GEN_0011:0039H
cline_58_0                                                                      			  Unused Relocatable        main_GEN_0011:003EH
cline_59_0                                                                      			  Unused Relocatable        main_GEN_0011:0043H
cline_65_0                                                                      			  Unused Relocatable        main_GEN_0011:0125H
cline_76_0                                                                      			  Unused Relocatable        main_GEN_0011:0128H
cline_77_0                                                                      			  Unused Relocatable        main_GEN_0011:012BH
cline_78_0                                                                      			  Unused Relocatable        main_GEN_0011:012EH
cline_80_0                                                                      			  Unused Relocatable        main_GEN_0011:0132H
cline_80_1                                                                      			  Unused Relocatable        main_GEN_0011:015DH
cline_82_0                                                                      			  Unused Relocatable        main_GEN_0011:013AH
cline_83_0                                                                      			  Unused Relocatable        main_GEN_0011:0142H
cline_84_0                                                                      			  Unused Relocatable        main_GEN_0011:0148H
cline_86_0                                                                      			  Unused Relocatable        main_GEN_0011:014DH
cline_87_0                                                                      			  Unused Relocatable        main_GEN_0011:0152H
cline_88_0                                                                      			  Unused Relocatable        main_GEN_0011:0157H
cline_91_0                                                                      			  Unused Relocatable        main_GEN_0011:015EH
cline_95_0                                                                      			  Unused Relocatable        main_GEN_0011:0161H
cline_96_0                                                                      			  Unused Relocatable        main_GEN_0011:0164H
cline_97_0                                                                      			  Unused Relocatable        main_GEN_0011:0167H
cline_99_0                                                                      			  Unused Relocatable        main_GEN_0011:016AH
dummy                                                                           			  Unused Number				     0 (0H)
else_0                                                                          			         Relocatable         main_GEN_0011:000BH
else_1                                                                          			         Relocatable         main_GEN_0011:004AH
else_2                                                                          			         Relocatable         main_GEN_0011:0027H
else_3                                                                          			         Relocatable         main_GEN_0011:0039H
else_4                                                                          			         Relocatable         main_GEN_0011:01A8H
else_5                                                                          			         Relocatable         main_GEN_0011:007DH
else_6                                                                          			         Relocatable         main_GEN_0011:00ACH
endif_0                                                                         			  Unused Relocatable        main_GEN_0011:000BH
endif_1                                                                         			         Relocatable         main_GEN_0011:004AH
endif_2                                                                         			         Relocatable         main_GEN_0011:0039H
endif_3                                                                         			         Relocatable         main_GEN_0011:0039H
endif_4                                                                         			         Relocatable         main_GEN_0011:01E5H
endif_5                                                                         			  Unused Relocatable        main_GEN_0011:007DH
endif_6                                                                         			  Unused Relocatable        main_GEN_0011:00ACH
for_10                                                                          			         Relocatable         main_GEN_0011:00EBH
for_6                                                                           			         Relocatable         main_GEN_0011:00AFH
for_8                                                                           			         Relocatable         main_GEN_0011:00BEH
for_end_0                                                                       			  Unused Relocatable        main_GEN_0011:0049H
for_end_1                                                                       			  Unused Relocatable        main_GEN_0011:015DH
for_end_10                                                                      			         Relocatable         main_GEN_0011:010AH
for_end_2                                                                       			  Unused Relocatable        main_GEN_0011:01A7H
for_end_3                                                                       			  Unused Relocatable        main_GEN_0011:01E5H
for_end_4                                                                       			  Unused Relocatable        main_GEN_0011:022CH
for_end_5                                                                       			  Unused Relocatable        main_GEN_0011:0069H
for_end_6                                                                       			         Relocatable         main_GEN_0011:0117H
for_end_7                                                                       			  Unused Relocatable        main_GEN_0011:00E3H
for_end_8                                                                       			         Relocatable         main_GEN_0011:00DDH
for_end_9                                                                       			  Unused Relocatable        main_GEN_0011:0110H
init_latch_label_0                                                              			  Unused Relocatable        main_GEN_0011:0043H
init_latch_label_1                                                              			  Unused Relocatable        main_GEN_0011:0157H
init_latch_label_10                                                             			  Unused Relocatable        main_GEN_0011:0110H
init_latch_label_2                                                              			  Unused Relocatable        main_GEN_0011:01A1H
init_latch_label_3                                                              			  Unused Relocatable        main_GEN_0011:01DFH
init_latch_label_4                                                              			  Unused Relocatable        main_GEN_0011:0226H
init_latch_label_5                                                              			  Unused Relocatable        main_GEN_0011:0063H
init_latch_label_6                                                              			  Unused Relocatable        main_GEN_0011:00D6H
init_latch_label_7                                                              			  Unused Relocatable        main_GEN_0011:00DDH
init_latch_label_8                                                              			  Unused Relocatable        main_GEN_0011:0103H
init_latch_label_9                                                              			  Unused Relocatable        main_GEN_0011:010AH
label_begin_92                                                                  			  Unused Relocatable        main_GEN_0011:0012H
label_begin_93                                                                  			  Unused Relocatable        main_GEN_0011:0132H
label_begin_94                                                                  			  Unused Relocatable        main_GEN_0011:016EH
label_begin_95                                                                  			  Unused Relocatable        main_GEN_0011:01ACH
label_begin_96                                                                  			  Unused Relocatable        main_GEN_0011:01F8H
label_begin_97                                                                  			  Unused Relocatable        main_GEN_0011:005CH
label_begin_98                                                                  			  Unused Relocatable        main_GEN_0011:00BBH
label_begin_99                                                                  			  Unused Relocatable        main_GEN_0011:00E8H
label_end_92                                                                    			         Relocatable         main_GEN_0011:0048H
label_end_93                                                                    			         Relocatable         main_GEN_0011:015CH
label_end_94                                                                    			         Relocatable         main_GEN_0011:01A6H
label_end_95                                                                    			         Relocatable         main_GEN_0011:01E4H
label_end_96                                                                    			         Relocatable         main_GEN_0011:022BH
label_end_97                                                                    			         Relocatable         main_GEN_0011:0068H
label_end_98                                                                    			         Relocatable         main_GEN_0011:00E2H
label_end_99                                                                    			         Relocatable         main_GEN_0011:010FH

	       SEGMENTS:

Size			  Name										 Class
0000H	 __INIT                                  			 CODE                                    
0001H	 main_GEN_0000                           			 X_OVLY                                  
0001H	 main_GEN_0001                           			 X_OVLY                                  
0001H	 main_GEN_0002                           			 X_OVLY                                  
0001H	 main_GEN_0003                           			 X_OVLY                                  
000CH	 main_GEN_0004                           			 X_OVLY                                  
0003H	 main_GEN_0005                           			 X_OVLY                                  
0001H	 main_GEN_0006                           			 X_OVLY                                  
0080H	 main_GEN_0007                           			 X_OVLY                                  
0021H	 main_GEN_0008                           			 X_OVLY                                  
0021H	 main_GEN_0009                           			 X_OVLY                                  
0001H	 main_GEN_0010                           			 X_OVLY                                  
0230H	 main_GEN_0011                           			 CODE_OVLY                               
